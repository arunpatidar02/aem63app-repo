########################################################
POM
########################################################

<plugin>
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>groovy-maven-plugin</artifactId>
                        <version>2.1.1</version>
                        <executions>
                            <execution>
                                <id>placeholder-replace</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <properties>
                                        <env>${env.ENV_TYPE}</env>
                                        <aws_sac>${env.AWS_SECRET_ACCESS_KEY}</aws_sac>
                                        <aws_ac>${env.AWS_ACCESS_KEY}</aws_ac>
                                        <logLevel>${env.GROOVY_LOG_LEVEL}</logLevel>
                                    </properties>
                                    <source>${script.path}/replacePlaceholder.groovy</source>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.groovy</groupId>
                                <artifactId>groovy-all</artifactId>
                                <version>4.0.22</version>
                                <type>pom</type>
                            </dependency>
                            <!-- AWS SDK START -->
                            <dependency>
                                <groupId>software.amazon.awssdk</groupId>
                                <artifactId>secretsmanager</artifactId>
                                <version>2.19.0</version>
                            </dependency>
                            <!-- AWS SDK END -->
                        </dependencies>
                    </plugin>



########################################################
replacePlaceholder.groovy
########################################################

import groovy.json.JsonSlurper
import groovyx.net.http.*
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider

/* START */
logging("Groovy Execution STARTED")

/* log level */
WARNING = 3
INFO = 2
DEBUG = 1
TRACE = 0
logSeparatorString = "*******************************"
def logLevel = properties.get("logLevel");
currentLogLevel = logLevel!=null ? logLevel.toInteger() : INFO;
logging("LOG LEVEL : $currentLogLevel : " + logeLevel(currentLogLevel));


/* Variables */
dryRun = false
boolean envCheck = true;
String[] envVariables = ['env', 'aws_ac', 'aws_sac'];
Map<String, String> envMap = [:].withDefault { key -> return [] }
Map<String,String> executionMap = new HashMap<String, Boolean>();
List<String> successList = new ArrayList<>()
List<String> failedList = new ArrayList<>()

String targetDir= "ui.config/target/classes/apps/myapp/config"

/* Execution */
String startMessage = "Executing " + (dryRun ? 'dryRun' : 'Replacement') + " run in a " + logeLevel(currentLogLevel) + " mode";
logging(startMessage + "\n");

envVariables.each {
	String val = properties.get(it);
	if(val == null){
		envCheck = false;
	}
	envMap.put(it, properties.get(it))
}
envMap.each { logging("$it.key : $it.value",1) }
logging("Environment variable check : " + (envCheck == true ? "Pass" : "Fail"),2)

if(!envCheck){
	logging("One or many variables out of $envVariables are missing, skipping replacement. ",3,0)
	return;
}
logging(logSeparatorString, 2)

String env =envMap.get("env")
String key =envMap.get("aws_ac")
String secretKey =envMap.get("aws_sac")

// Replacement logic starts
logging("Target Folder for replacement : " + targetDir,2)

// List all files
def files = getEnvironmentFolders(targetDir,env)


update(commonEnv,key,secretKey,files,executionMap)



logging(logSeparatorString, 2)
successList = successList.sort();
logging("\nThe following placeholders have been successfully replaced", 2)
successList.each {logging("\t"+it, 2)}

failedList = failedList.sort();
logging("\nThe following placeholders have been FAILED to be replaced", 2)
failedList.each {logging("\t"+it, 2)}



def update(ArrayList<String> env, String key, String secretKey, ArrayList<String> files, Map<String,Boolean> executionMap) {
	env.each {
		def secrets = getSecrets(it,key,secretKey)
		updatePlaceholders(files,secrets,executionMap)
	}

}



def getSecrets(String env,String key,String secretKey) {
	JsonSlurper parser = new JsonSlurper()
	// Define the command to run
	Region region = Region.EU_CENTRAL_1
	AwsBasicCredentials awsCreds = AwsBasicCredentials.create(key,secretKey)
	SecretsManagerClient secretsClient = SecretsManagerClient.builder().region(region).credentialsProvider(StaticCredentialsProvider.create(awsCreds)).build()
	GetSecretValueRequest valueRequest = GetSecretValueRequest.builder().secretId(env).build()
	GetSecretValueResponse valueResponse = secretsClient.getSecretValue(valueRequest)
	String secret = valueResponse.secretString();
	logging("Secret String for $env from AWS\n $secret", 0)
	secretsClient.close()
	if (secret.isEmpty()){
		throw new RuntimeException("Not able to get the Secret from AWS Secret Manager or Secret String is Empty")
	}
	return parser.parseText(secret)
}

def ArrayList<String> getEnvironmentFolders(String targetDir, String env) {
	return files
}



def fileWrite(file, fileContent){
	if(!dryRun){
		file.write(fileContent);
	}
}

/**
 * Simple logging function based on (e.g. org.slf4j.Logger)
 */
def logging(message) {
	logging(message, INFO)
}

def logging(message, level, indentationSize = 0) {
	if (level >= currentLogLevel) {
		log.info((" " * indentationSize) + "[GROOVY] ${message}")
	}
}

def logeLevel(level){
	switch(level) {
		case 0: level == 0;
			return "TRACE";
		case 1: level == 1;
			return "DEBUG";
		case 2: level == 2;
			return "INFO";
		case 3: level == 3;
			return "WARN";
		default:
			return "INFO";

	}
}


